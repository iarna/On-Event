Documentation:

   -nomagic, -alias, -excludes

   The fact that event's get the object triggering them as their first
   argument.

   Blog post about event grouping (eg collate):
       my $group = ONE::Group->do( sub {
       });
       $group->once( all => sub {
          # do something when all of the grouped events have fired at least
          # once
          } );

   Contemplate removing ONE::Timer's sleep, that really belongs in Coro
   land.  Collate would do better there too.

   Implement collate as: my $g = ONE::Group->do( $todo ); $g->once( all=> rouse_cb ); rouse_wait;
   Implement sleep as: ONE::Timer->after( 5, rouse_cb ); rouse_wait;
   

ONE::IO
   Wrap AE::IO
ONE::Signal
   Wrap AE::signal

ONE::Subprocess
   Fork + AE::child

rename ONE to ONE::Listenable? MooseX::Event?

   Events:
     idle: AE::idle
     SIG*: AE::signal *

ONE::Handle
   Wrap AnyEvent::Handle
ONE::Socket
   Wrap AnyEvent::Socket

ONE::Collate
   Document

Look at AnyEvent::Debounce-- event collation would be nice to have as an
option.

ONE::Timer->every( 1 => dampen { say "boo" 
my $t = ONE::Timer->new( interval=>1 );
$t->on( timeout => dampen { say "boo" x @{$_[1]} } );
$t->start;
sleep 3.5;
$t->cancel; # Will print "booboo" and "boo", as the first two ticks got
            # combined, and the third tick 
